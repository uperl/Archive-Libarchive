package Archive::Libarchive::Lib::Archive;

use strict;
use warnings;
use 5.020;

# ABSTRACT: Private class for Arcive::Libarchive
# VERSION

# NOTE: This document is autogenerated from the template
# maint/tt/Code.pm.tt
# Please see maint/README.md for details on updating.

=head1 SYNOPSIS

 % perldoc Archive::Libarchive

=head1 DESCRIPTION

This is a private class for L<Archive::Libarchive> see the main documentation for the public interface.

=cut

package Archive::Libarchive::Archive;

use Archive::Libarchive::Lib;

my $ffi = Archive::Libarchive::Lib->ffi;

$ffi->attach( clear_error => ['archive'] );
$ffi->attach( compression => ['archive'] => 'int' );
$ffi->attach( compression_name => ['archive'] => 'string' );
$ffi->attach( copy_error => ['archive', 'archive'] );
$ffi->attach( errno => ['archive'] => 'int' );
$ffi->attach( error_string => ['archive'] => 'string' );
$ffi->attach( file_count => ['archive'] => 'int' );
$ffi->attach( filter_bytes => ['archive', 'int'] => 'sint64' );
$ffi->attach( filter_code => ['archive', 'int'] => 'int' );
$ffi->attach( filter_count => ['archive'] => 'int' );
$ffi->attach( filter_name => ['archive', 'int'] => 'string' );
$ffi->attach( format => ['archive'] => 'int' );
$ffi->attach( format_name => ['archive'] => 'string' );
$ffi->attach( position_compressed => ['archive'] => 'sint64' );
$ffi->attach( position_uncompressed => ['archive'] => 'sint64' );
$ffi->attach( seek_data => ['archive', 'sint64', 'int'] => 'sint64' );

1;

__END__

=head1 SEE ALSO

=over 4

=item L<Archive::Libarchive>

This is the main top-level module for using C<libarchive> from
Perl.  It is the best place to start reading the documentation.
It pulls in the other classes and C<libarchive> constants so
that you only need one C<use> statement to effectively use
C<libarchive>.

=item L<Archive::Libarchive::API>

This contains the full and complete API for all of the L<Archive::Libarchive>
classes.  Because C<libarchive> has hundreds of methods, the main documentation
pages elsewhere only contain enough to be useful, and not to overwhelm.

=item L<Archive::Libarchive::Archive>

The base class of all archive classes.  This includes some common error
reporting functionality among other things.

=item L<Archive::Libarchive::ArchiveRead>

This class is used for reading from archives.

=item L<Archive::Libarchive::ArchiveWrite>

This class is for creating new archives.

=item L<Archive::Libarchive::DiskRead>

This class is for reading L<Archive::Libarchive::Entry> objects from disk
so that they can be written to L<Archive::Libarchive::ArchiveWrite> objects.

=item L<Archive::Libarchive::DiskWrite>

This class is for writing L<Archive::Libarchive::Entry> objects to disk
that have been written from L<Archive::Libarchive::ArchiveRead> objects.

=item L<Archive::Libarchive::Entry>

This class represents a file in an archive, or on disk.

=item L<Archive::Libarchive::EntryLinkResolver>

This class exposes the C<libarchive> link resolver API.

=item L<Archive::Libarchive::Match>

This class exposes the C<libarchive> match API.


=item L<Alien::Libarchive3>

If a suitable system C<libarchive> can't be found, then this
L<Alien> will be installed to provide it.

=item L<libarchive.org|http://libarchive.org/>

The C<libarchive> project home page.

=item L<https://github.com/libarchive/libarchive/wiki>

The C<libarchive> project wiki.

=item L<https://github.com/libarchive/libarchive/wiki/ManualPages>

Some of the C<libarchive> man pages are listed here.

=back

=cut
